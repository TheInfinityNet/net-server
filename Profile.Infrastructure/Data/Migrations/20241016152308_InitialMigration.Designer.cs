// <auto-generated />
using System;
using InfinityNetServer.Services.Profile.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace InfinityNetServer.Services.Profile.Infrastructure.Data.Migrations
{
    [DbContext(typeof(ProfileDbContext))]
    [Migration("20241016152308_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("InfinityNetServer.Services.Profile.Domain.Entities.Profile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("CoverPictureId")
                        .HasColumnType("uuid")
                        .HasColumnName("cover_picture_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("DeletedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("deleted_at");

                    b.Property<Guid>("DeletedBy")
                        .HasMaxLength(255)
                        .HasColumnType("uuid")
                        .HasColumnName("deleted_by");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<Guid>("PictureId")
                        .HasColumnType("uuid")
                        .HasColumnName("picture_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid>("UpdatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("uuid")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.ToTable("profiles");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("InfinityNetServer.Services.Profile.Domain.Entities.PageProfile", b =>
                {
                    b.HasBaseType("InfinityNetServer.Services.Profile.Domain.Entities.Profile");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.ToTable("page_profiles");
                });

            modelBuilder.Entity("InfinityNetServer.Services.Profile.Domain.Entities.UserProfile", b =>
                {
                    b.HasBaseType("InfinityNetServer.Services.Profile.Domain.Entities.Profile");

                    b.Property<string>("Bio")
                        .HasColumnType("text")
                        .HasColumnName("bio");

                    b.Property<DateOnly>("Birthdate")
                        .HasColumnType("date")
                        .HasColumnName("birthdate");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("first_name");

                    b.Property<int>("Gender")
                        .HasMaxLength(20)
                        .HasColumnType("integer")
                        .HasColumnName("gender");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("last_name");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("middle_name");

                    b.Property<string>("MobileNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("mobile_number");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("username");

                    b.HasIndex("MobileNumber")
                        .IsUnique();

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("user_profiles");
                });

            modelBuilder.Entity("InfinityNetServer.Services.Profile.Domain.Entities.PageProfile", b =>
                {
                    b.HasOne("InfinityNetServer.Services.Profile.Domain.Entities.Profile", "Profile")
                        .WithOne("PageProfile")
                        .HasForeignKey("InfinityNetServer.Services.Profile.Domain.Entities.PageProfile", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("InfinityNetServer.Services.Profile.Domain.Entities.UserProfile", b =>
                {
                    b.HasOne("InfinityNetServer.Services.Profile.Domain.Entities.Profile", "Profile")
                        .WithOne("UserProfile")
                        .HasForeignKey("InfinityNetServer.Services.Profile.Domain.Entities.UserProfile", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("InfinityNetServer.Services.Profile.Domain.Entities.Profile", b =>
                {
                    b.Navigation("PageProfile");

                    b.Navigation("UserProfile");
                });
#pragma warning restore 612, 618
        }
    }
}
