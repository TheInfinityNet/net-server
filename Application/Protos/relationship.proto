syntax = "proto3";

package InfinityNetServer.BuildingBlocks.Application.Protos;

option csharp_namespace = "InfinityNetServer.BuildingBlocks.Application.Protos";

import "Protos/base.proto";

message ProfilesRelationshipRequest {

	string currentProfileId = 1;

	string targetProfileId = 2;

}

message MutualFriendCountRequest {

	repeated string profileIds = 1;

	string currentProfileId = 2;

}

message ProfileIdWithMutualCount {

	string profileId = 1;

	int32 count =2;

}

message MutualFriendCountResponse {

	repeated ProfileIdWithMutualCount profileIdsWithMutualCounts = 1;

}

message ProfileRelationshipResponse {

	bool result = 1;

}

message ProfileInteractionIdsResponse {
	
	repeated string profileInteractionIds = 1;

}

service RelationshipService {

	rpc hasFriendship(ProfilesRelationshipRequest) returns (ProfileRelationshipResponse) {}

	rpc hasBlocked(ProfilesRelationshipRequest) returns (ProfileRelationshipResponse) {}

	rpc hasFollowed(ProfilesRelationshipRequest) returns (ProfileRelationshipResponse) {}

	rpc hasFriendRequest(ProfilesRelationshipRequest) returns (ProfileRelationshipResponse) {}

	rpc getAllFriendIds(ProfileRequest) returns (ProfileIdsResponse) {}

	rpc getAllFollowerIds(ProfileRequest) returns (ProfileIdsResponse) {}

	rpc getAllFolloweeIds(ProfileRequest) returns (ProfileIdsResponse) {}

	rpc getAllBlockerIds(ProfileRequest) returns (ProfileIdsResponse) {}

	rpc getAllBlockeeIds(ProfileRequest) returns (ProfileIdsResponse) {}

	rpc countMutualFriends(MutualFriendCountRequest) returns (MutualFriendCountResponse) {}

	rpc getAllPendingRequestIds(ProfileRequest) returns (ProfileIdsResponse) {}

	rpc getAllRequestIds(ProfileRequest) returns (ProfileIdsResponse) {}

	rpc getAllSentRequestIds(ProfileRequest) returns (ProfileIdsResponse) {}

}
