syntax = "proto3";

package InfinityNetServer.BuildingBlocks.Application.Protos;

option csharp_namespace = "InfinityNetServer.BuildingBlocks.Application.Protos";

import "Protos/base.proto";

message ProfilesRelationshipRequest {

  string currentProfileId = 1;

  string targetProfileId = 2;

}

message MutualFriendCountRequest {

	repeated string profileIds = 1;

	string currentProfileId = 2;

}

message ProfileIdWithMutualCount {

	string profileId = 1;

	int32 count =2;

}

message MutualFriendCountResponse {

	repeated ProfileIdWithMutualCount profileIdsWithMutualCounts = 1;

}

message ProfileRelationshipResponse {

  bool result = 1;

}

message ProfileInteractionIdsResponse {
	
  repeated string profileInteractionIds = 1;

}

service RelationshipService {

  rpc hasFriendship(ProfilesRelationshipRequest) returns (ProfileRelationshipResponse) {}

  rpc hasBlocked(ProfilesRelationshipRequest) returns (ProfileRelationshipResponse) {}

  rpc hasFollowed(ProfilesRelationshipRequest) returns (ProfileRelationshipResponse) {}

  rpc hasFriendRequest(ProfilesRelationshipRequest) returns (ProfileRelationshipResponse) {}

  rpc getFriendIds(ProfileRequest) returns (ProfileIdsResponse) {}

  rpc getFollowerIds(ProfileRequest) returns (ProfileIdsResponse) {}

  rpc getFolloweeIds(ProfileRequest) returns (ProfileIdsResponse) {}

  rpc getBlockerIds(ProfileRequest) returns (ProfileIdsResponse) {}

  rpc getBlockeeIds(ProfileRequest) returns (ProfileIdsResponse) {}

  rpc getMutualFriendCount(MutualFriendCountRequest) returns (MutualFriendCountResponse) {}

  rpc getPendingRequestProfiles(ProfileRequest) returns (ProfileIdsResponse) {}

  rpc getRequestProfiles(ProfileRequest) returns (ProfileIdsResponse) {}

  rpc getSentRequestProfiles(ProfileRequest) returns (ProfileIdsResponse) {}
}
