version: '3.9'

services:
  infinity-net-redis-insight:
    image: redis/redisinsight:latest
    container_name: infinity-net-redis-insight
    volumes:
      - infinity-net-redis-insight-data:/db
    ports:
      - "5540:5540"
    networks:
      - infinity-net-network
    restart: unless-stopped

  infinity-net-redis:
    image: redis:latest
    container_name: infinity-net-redis
    volumes:
      - infinity-net-redis-data:/data
    ports:
      - "6379:6379"
    networks:
      - infinity-net-network
    restart: unless-stopped

  infinity-net-rabbitmq:
    image: rabbitmq:management-alpine
    container_name: infinity-net-rabbitmq
    command: rabbitmq-server
    environment:
      RABBITMQ_DEFAULT_USER: infinitynetUser      
      RABBITMQ_DEFAULT_PASS: Password@123     
    volumes:
      - infinity-net-rabbitmq-data:/var/lib/rabbitmq
    ports:
      - "5672:5672"      # Port for producer & consumer
      - "15672:15672"    # UI dashboard
    networks:
      - infinity-net-network
    restart: unless-stopped

  infinity-net-pgadmin:
    image: dpage/pgadmin4:snapshot
    container_name: infinity-net-pgadmin
    depends_on:
      [ infinity-net-postgres ]
    environment:
      PGADMIN_DEFAULT_EMAIL: infinitynet@admin.com
      PGADMIN_DEFAULT_PASSWORD: Password@123
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    volumes:
      - infinity-net-pgadmin-data:/var/lib/pgadmin
    ports:
      - "5050:80"
    networks:
      - infinity-net-network
    restart: unless-stopped

  infinity-net-postgres:
    image: postgres:12.20-bullseye
    container_name: infinity-net-postgres
    environment:
      POSTGRES_USER: infinitynetUser
      POSTGRES_PASSWORD: Password@123
      PGDATA: /var/lib/postgresql/data
    ports:
      - "5432:5432"
    volumes:
      - infinity-net-postgres-data:/var/lib/postgresql/data
      - ./Docker/postgres/postgres-init-db:/docker-entrypoint-initdb.d:ro
    networks:
      - infinity-net-network
    restart: unless-stopped

  infinity-net-minio:
    image: minio/minio:RELEASE.2024-08-26T15-33-07Z.fips
    container_name: infinity-net-minio
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - ./Docker/minio/infinity-net-minio-data:/data:rw
    environment:
      MINIO_ROOT_USER: infinitynetUser
      MINIO_ROOT_PASSWORD: Password@123
    command: server /data --console-address ":9001"

  # infinity-net-tempo:
    # image: grafana/tempo:main-bbe0435
    # container_name: infinity-net-tempo
    # command: [ "-config.file=/etc/tempo.yaml" ]
    # volumes:
      # - ./docker/grafana-stack/tempo/tempo.yml:/etc/tempo.yaml:ro
      # - ./docker/grafana-stack/tempo/tempo-data:/tmp/tempo
    # ports:
      # - "3110:3100" # Tempo
      # - "9411:9411" # zipkin
      # - "4317:4317" # OTel
    # networks:
      # - infinity-net-network
    # restart: unless-stopped

  # infinity-net-loki:
    # image: grafana/loki:main
    # container_name: infinity-net-loki
    # command: [ "-config.file=/etc/loki/local-config.yaml" ]
    # volumes:
      # - ./docker/grafana-stack/loki/loki-config.yaml:/etc/loki/loki-local-config.yaml
    # ports:
      # - "3100:3100"
    # networks:
      # - infinity-net-network
    # restart: unless-stopped

  # promtail:
    # image: grafana/promtail:latest
    # volumes:
      # - ./docker/grafana-stack/promtail/var/log:/var/log
      # - ./docker/grafana-stack/promtail/promtail-config.yaml:/etc/promtail/config.yaml
    # command: -config.file=/etc/promtail/config.yaml
    # networks:
      # - infinity-net-network
    # restart: unless-stopped

  # infinity-net-prometheus:
    # image: prom/prometheus:main
    # container_name: infinity-net-prometheus
    # command:
      # - --enable-feature=exemplar-storage
      # - --config.file=/etc/prometheus/prometheus.yml
    # volumes:
      # - ./docker/grafana-stack/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    # ports:
      # - "9090:9090"
    # networks:
      # - infinity-net-network
    # restart: unless-stopped

  # infinity-net-grafana:
    # image: grafana/grafana:10.1.0
    # container_name: infinity-net-grafana
    # environment:
      # GF_SECURITY_ADMIN_USER: infinitynetUser
      # GF_SECURITY_ADMIN_PASSWORD: Password@123
    # volumes:
      # - ./docker/grafana-stack/grafana/datasource.yml:/etc/grafana/provisioning/datasources/datasource.yml
      # - ./docker/grafana-stack/grafana/dashboards:/etc/grafana/provisioning/dashboards
    # ports:
      # - "3000:3000"
    # networks:
      # - infinity-net-network
    # restart: unless-stopped

  # infinity-net-elasticsearch:
    # image: elasticsearch:8.15.0
    # container_name: infinity-net-elasticsearch
    # environment:
      # xpack.security.enabled: false
      # discovery.type: single-node
    # ulimits:
      # memlock:
        # soft: -1
        # hard: -1
      # nofile:
        # soft: 65536
        # hard: 65536
    # cap_add:
      # - IPC_LOCK
    # volumes:
      # - infinity-net-elasticsearch-data:/usr/share/elasticsearch/data
    # ports:
      # - "9200:9200"
      # - "9300:9300"
    # networks:
      # - infinity-net-network
    # restart: unless-stopped

  # infinity-net-kibana:
    # image: kibana:8.15.0
    # container_name: infinity-net-kibana
    # depends_on:
      # [ infinity-net-elasticsearch ]
    # environment:
      # ELASTICSEARCH_HOSTS: http://infinity-net-elasticsearch:9200
    # ports:
      # - "5601:5601"
    # networks:
      # - infinity-net-network
    # restart: unless-stopped

  # infinity-net-logstash:
    # image: logstash:8.15.0
    # container_name: infinity-net-logstash
    # depends_on:
      # [ infinity-net-elasticsearch ]
    # environment:
      # LS_JAVA_OPTS: "-Xmx256m -Xms256m"
    # volumes:
      # - ./docker/elk-stack/logstash/config/logstash.yml:/usr/share/logstash/config/logstash.yml:ro
      # - ./docker/elk-stack/logstash/pipeline:/usr/share/logstash/pipeline:ro
    # ports:
      # - "5044:5044"
      # - "5000:5000/tcp"
      # - "5000:5000/udp"
      # - "9600:9600"
    # networks:
      # - infinity-net-network
    # restart: unless-stopped

networks:
  infinity-net-network:
    driver: bridge

volumes:
  infinity-net-redis-insight-data:
  infinity-net-redis-data:
  infinity-net-rabbitmq-data:
  infinity-net-pgadmin-data:
  infinity-net-postgres-data:
  #infinity-net-elasticsearch-data: